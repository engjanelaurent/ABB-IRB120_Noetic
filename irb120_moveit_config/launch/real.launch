<launch>

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="simple" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(dirname)/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
    <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(dirname)/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(dirname)/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

<!-- This launch file provides a socket-based connection to ABB robots
      using the standard ROS Industrial simple_message protocol.
        ** a new parameter is added to control J23-linkage correction **

      Several nodes are started, to supply both low-level robot communication
      and higher-level actionlib support:
        - robot_state : publishes current joint positions and robot state data
        - motion_download_interface : command robot motion by sending motion points to robot
        - joint_trajectory_action : actionlib interface to control robot motion

    Usage:
      robot_interface.launch robot_ip:=<value> [J23_coupled:=false]
  -->
  <rosparam command="load" file="$(find irb120_moveit_config)/config/irb120_joint_names.yaml" />
  <param name="robot_ip_address" type="str" value="115.145.159.181"/>
  <param name="J23_coupled" type="bool" value="false"/>

  <!-- robot_state: publishes joint positions and robot-state data
                  (from socket connection to robot) -->
  <node pkg="abb_driver" type="robot_state" name="robot_state"/>

  <!-- motion_download_interface: sends robot motion commands by DOWNLOADING path to robot
                                  (using socket connection to robot) -->
  <node pkg="abb_driver" type="motion_download_interface" name="motion_download_interface"/>

  <!-- joint_trajectory_action: provides actionlib interface for high-level robot control -->
  <node pkg="industrial_robot_client" type="joint_trajectory_action" name="joint_trajectory_action"/>

</launch>

